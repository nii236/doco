// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Tag is an object representing the database table.
type Tag struct {
	ID         null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name       string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Archived   bool       `boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt null.Time  `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *tagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TagColumns = struct {
	ID         string
	Name       string
	Archived   string
	ArchivedAt string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	Name:       "name",
	Archived:   "archived",
	ArchivedAt: "archived_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

var TagWhere = struct {
	ID         whereHelpernull_Int64
	Name       whereHelperstring
	Archived   whereHelperbool
	ArchivedAt whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelpernull_Int64{field: "\"tags\".\"id\""},
	Name:       whereHelperstring{field: "\"tags\".\"name\""},
	Archived:   whereHelperbool{field: "\"tags\".\"archived\""},
	ArchivedAt: whereHelpernull_Time{field: "\"tags\".\"archived_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"tags\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"tags\".\"created_at\""},
}

// TagRels is where relationship names are stored.
var TagRels = struct {
	Documents string
}{
	Documents: "Documents",
}

// tagR is where relationships are stored.
type tagR struct {
	Documents DocumentSlice
}

// NewStruct creates a new relationship struct
func (*tagR) NewStruct() *tagR {
	return &tagR{}
}

// tagL is where Load methods for each relationship are stored.
type tagL struct{}

var (
	tagAllColumns            = []string{"id", "name", "archived", "archived_at", "updated_at", "created_at"}
	tagColumnsWithoutDefault = []string{"name", "archived_at"}
	tagColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	tagPrimaryKeyColumns     = []string{"id"}
)

type (
	// TagSlice is an alias for a slice of pointers to Tag.
	// This should generally be used opposed to []Tag.
	TagSlice []*Tag
	// TagHook is the signature for custom Tag hook methods
	TagHook func(boil.Executor, *Tag) error

	tagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagType                 = reflect.TypeOf(&Tag{})
	tagMapping              = queries.MakeStructMapping(tagType)
	tagPrimaryKeyMapping, _ = queries.BindMapping(tagType, tagMapping, tagPrimaryKeyColumns)
	tagInsertCacheMut       sync.RWMutex
	tagInsertCache          = make(map[string]insertCache)
	tagUpdateCacheMut       sync.RWMutex
	tagUpdateCache          = make(map[string]updateCache)
	tagUpsertCacheMut       sync.RWMutex
	tagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tagBeforeInsertHooks []TagHook
var tagBeforeUpdateHooks []TagHook
var tagBeforeDeleteHooks []TagHook
var tagBeforeUpsertHooks []TagHook

var tagAfterInsertHooks []TagHook
var tagAfterSelectHooks []TagHook
var tagAfterUpdateHooks []TagHook
var tagAfterDeleteHooks []TagHook
var tagAfterUpsertHooks []TagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tag) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tag) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tag) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tag) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tag) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tag) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tag) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tag) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tag) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagHook registers your hook function for all future operations.
func AddTagHook(hookPoint boil.HookPoint, tagHook TagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tagBeforeInsertHooks = append(tagBeforeInsertHooks, tagHook)
	case boil.BeforeUpdateHook:
		tagBeforeUpdateHooks = append(tagBeforeUpdateHooks, tagHook)
	case boil.BeforeDeleteHook:
		tagBeforeDeleteHooks = append(tagBeforeDeleteHooks, tagHook)
	case boil.BeforeUpsertHook:
		tagBeforeUpsertHooks = append(tagBeforeUpsertHooks, tagHook)
	case boil.AfterInsertHook:
		tagAfterInsertHooks = append(tagAfterInsertHooks, tagHook)
	case boil.AfterSelectHook:
		tagAfterSelectHooks = append(tagAfterSelectHooks, tagHook)
	case boil.AfterUpdateHook:
		tagAfterUpdateHooks = append(tagAfterUpdateHooks, tagHook)
	case boil.AfterDeleteHook:
		tagAfterDeleteHooks = append(tagAfterDeleteHooks, tagHook)
	case boil.AfterUpsertHook:
		tagAfterUpsertHooks = append(tagAfterUpsertHooks, tagHook)
	}
}

// OneG returns a single tag record from the query using the global executor.
func (q tagQuery) OneG() (*Tag, error) {
	return q.One(boil.GetDB())
}

// One returns a single tag record from the query.
func (q tagQuery) One(exec boil.Executor) (*Tag, error) {
	o := &Tag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for tags")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Tag records from the query using the global executor.
func (q tagQuery) AllG() (TagSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Tag records from the query.
func (q tagQuery) All(exec boil.Executor) (TagSlice, error) {
	var o []*Tag

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Tag slice")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Tag records in the query, and panics on error.
func (q tagQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Tag records in the query.
func (q tagQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count tags rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q tagQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tagQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if tags exists")
	}

	return count > 0, nil
}

// Documents retrieves all the document's Documents with an executor.
func (o *Tag) Documents(mods ...qm.QueryMod) documentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"documents_tags\" on \"documents\".\"id\" = \"documents_tags\".\"document_id\""),
		qm.Where("\"documents_tags\".\"tag_id\"=?", o.ID),
	)

	query := Documents(queryMods...)
	queries.SetFrom(query.Query, "\"documents\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"documents\".*"})
	}

	return query
}

// LoadDocuments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadDocuments(e boil.Executor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"documents\".*, \"a\".\"tag_id\""),
		qm.From("\"documents\""),
		qm.InnerJoin("\"documents_tags\" as \"a\" on \"documents\".\"id\" = \"a\".\"document_id\""),
		qm.WhereIn("\"a\".\"tag_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load documents")
	}

	var resultSlice []*Document

	var localJoinCols []int64
	for results.Next() {
		one := new(Document)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.ProjectID, &one.TaxonomyID, &one.Sequence, &one.Archived, &one.ArchivedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for documents")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice documents")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on documents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for documents")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Documents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &documentR{}
			}
			foreign.R.Tags = append(foreign.R.Tags, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.Documents = append(local.R.Documents, foreign)
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.Tags = append(foreign.R.Tags, local)
				break
			}
		}
	}

	return nil
}

// AddDocumentsG adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Tags appropriately.
// Uses the global database handle.
func (o *Tag) AddDocumentsG(insert bool, related ...*Document) error {
	return o.AddDocuments(boil.GetDB(), insert, related...)
}

// AddDocuments adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Tags appropriately.
func (o *Tag) AddDocuments(exec boil.Executor, insert bool, related ...*Document) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"documents_tags\" (\"tag_id\", \"document_id\") values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &tagR{
			Documents: related,
		}
	} else {
		o.R.Documents = append(o.R.Documents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &documentR{
				Tags: TagSlice{o},
			}
		} else {
			rel.R.Tags = append(rel.R.Tags, o)
		}
	}
	return nil
}

// SetDocumentsG removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tags's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Tags's Documents accordingly.
// Uses the global database handle.
func (o *Tag) SetDocumentsG(insert bool, related ...*Document) error {
	return o.SetDocuments(boil.GetDB(), insert, related...)
}

// SetDocuments removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tags's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Tags's Documents accordingly.
func (o *Tag) SetDocuments(exec boil.Executor, insert bool, related ...*Document) error {
	query := "delete from \"documents_tags\" where \"tag_id\" = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeDocumentsFromTagsSlice(o, related)
	if o.R != nil {
		o.R.Documents = nil
	}
	return o.AddDocuments(exec, insert, related...)
}

// RemoveDocumentsG relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Tags.
// Uses the global database handle.
func (o *Tag) RemoveDocumentsG(related ...*Document) error {
	return o.RemoveDocuments(boil.GetDB(), related...)
}

// RemoveDocuments relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Tags.
func (o *Tag) RemoveDocuments(exec boil.Executor, related ...*Document) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"documents_tags\" where \"tag_id\" = ? and \"document_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeDocumentsFromTagsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Documents {
			if rel != ri {
				continue
			}

			ln := len(o.R.Documents)
			if ln > 1 && i < ln-1 {
				o.R.Documents[i] = o.R.Documents[ln-1]
			}
			o.R.Documents = o.R.Documents[:ln-1]
			break
		}
	}

	return nil
}

func removeDocumentsFromTagsSlice(o *Tag, related []*Document) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tags {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.Tags)
			if ln > 1 && i < ln-1 {
				rel.R.Tags[i] = rel.R.Tags[ln-1]
			}
			rel.R.Tags = rel.R.Tags[:ln-1]
			break
		}
	}
}

// Tags retrieves all the records using an executor.
func Tags(mods ...qm.QueryMod) tagQuery {
	mods = append(mods, qm.From("\"tags\""))
	return tagQuery{NewQuery(mods...)}
}

// FindTagG retrieves a single record by ID.
func FindTagG(iD null.Int64, selectCols ...string) (*Tag, error) {
	return FindTag(boil.GetDB(), iD, selectCols...)
}

// FindTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTag(exec boil.Executor, iD null.Int64, selectCols ...string) (*Tag, error) {
	tagObj := &Tag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tags\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from tags")
	}

	return tagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tag) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tag) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no tags provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tagInsertCacheMut.RLock()
	cache, cached := tagInsertCache[key]
	tagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tagAllColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tagType, tagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tags\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"tags\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, tagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into tags")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for tags")
	}

CacheNoHooks:
	if !cached {
		tagInsertCacheMut.Lock()
		tagInsertCache[key] = cache
		tagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tag record using the global executor.
// See Update for more documentation.
func (o *Tag) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Tag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tag) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tagUpdateCacheMut.RLock()
	cache, cached := tagUpdateCache[key]
	tagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tagAllColumns,
			tagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, tagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, append(wl, tagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for tags")
	}

	if !cached {
		tagUpdateCacheMut.Lock()
		tagUpdateCache[key] = cache
		tagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tagQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tagQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for tags")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TagSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TagSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in tag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all tag")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Tag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tag) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Tag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tag) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Tag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tagPrimaryKeyMapping)
	sql := "DELETE FROM \"tags\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for tags")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tagQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no tagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for tags")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TagSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TagSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from tag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for tags")
	}

	if len(tagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tag) ReloadG() error {
	if o == nil {
		return errors.New("db: no Tag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tag) Reload(exec boil.Executor) error {
	ret, err := FindTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty TagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tags\".* FROM \"tags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TagSlice")
	}

	*o = slice

	return nil
}

// TagExistsG checks if the Tag row exists.
func TagExistsG(iD null.Int64) (bool, error) {
	return TagExists(boil.GetDB(), iD)
}

// TagExists checks if the Tag row exists.
func TagExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tags\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if tags exists")
	}

	return exists, nil
}
