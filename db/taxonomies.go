// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Taxonomy is an object representing the database table.
type Taxonomy struct {
	ID         null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name       string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Archived   bool       `boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt null.Time  `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *taxonomyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxonomyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxonomyColumns = struct {
	ID         string
	Name       string
	Archived   string
	ArchivedAt string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	Name:       "name",
	Archived:   "archived",
	ArchivedAt: "archived_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

var TaxonomyWhere = struct {
	ID         whereHelpernull_Int64
	Name       whereHelperstring
	Archived   whereHelperbool
	ArchivedAt whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelpernull_Int64{field: "\"taxonomies\".\"id\""},
	Name:       whereHelperstring{field: "\"taxonomies\".\"name\""},
	Archived:   whereHelperbool{field: "\"taxonomies\".\"archived\""},
	ArchivedAt: whereHelpernull_Time{field: "\"taxonomies\".\"archived_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"taxonomies\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"taxonomies\".\"created_at\""},
}

// TaxonomyRels is where relationship names are stored.
var TaxonomyRels = struct {
	Documents string
}{
	Documents: "Documents",
}

// taxonomyR is where relationships are stored.
type taxonomyR struct {
	Documents DocumentSlice
}

// NewStruct creates a new relationship struct
func (*taxonomyR) NewStruct() *taxonomyR {
	return &taxonomyR{}
}

// taxonomyL is where Load methods for each relationship are stored.
type taxonomyL struct{}

var (
	taxonomyAllColumns            = []string{"id", "name", "archived", "archived_at", "updated_at", "created_at"}
	taxonomyColumnsWithoutDefault = []string{"name", "archived_at"}
	taxonomyColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	taxonomyPrimaryKeyColumns     = []string{"id"}
)

type (
	// TaxonomySlice is an alias for a slice of pointers to Taxonomy.
	// This should generally be used opposed to []Taxonomy.
	TaxonomySlice []*Taxonomy
	// TaxonomyHook is the signature for custom Taxonomy hook methods
	TaxonomyHook func(boil.Executor, *Taxonomy) error

	taxonomyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxonomyType                 = reflect.TypeOf(&Taxonomy{})
	taxonomyMapping              = queries.MakeStructMapping(taxonomyType)
	taxonomyPrimaryKeyMapping, _ = queries.BindMapping(taxonomyType, taxonomyMapping, taxonomyPrimaryKeyColumns)
	taxonomyInsertCacheMut       sync.RWMutex
	taxonomyInsertCache          = make(map[string]insertCache)
	taxonomyUpdateCacheMut       sync.RWMutex
	taxonomyUpdateCache          = make(map[string]updateCache)
	taxonomyUpsertCacheMut       sync.RWMutex
	taxonomyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taxonomyBeforeInsertHooks []TaxonomyHook
var taxonomyBeforeUpdateHooks []TaxonomyHook
var taxonomyBeforeDeleteHooks []TaxonomyHook
var taxonomyBeforeUpsertHooks []TaxonomyHook

var taxonomyAfterInsertHooks []TaxonomyHook
var taxonomyAfterSelectHooks []TaxonomyHook
var taxonomyAfterUpdateHooks []TaxonomyHook
var taxonomyAfterDeleteHooks []TaxonomyHook
var taxonomyAfterUpsertHooks []TaxonomyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Taxonomy) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Taxonomy) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Taxonomy) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Taxonomy) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Taxonomy) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Taxonomy) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Taxonomy) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Taxonomy) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Taxonomy) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxonomyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaxonomyHook registers your hook function for all future operations.
func AddTaxonomyHook(hookPoint boil.HookPoint, taxonomyHook TaxonomyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		taxonomyBeforeInsertHooks = append(taxonomyBeforeInsertHooks, taxonomyHook)
	case boil.BeforeUpdateHook:
		taxonomyBeforeUpdateHooks = append(taxonomyBeforeUpdateHooks, taxonomyHook)
	case boil.BeforeDeleteHook:
		taxonomyBeforeDeleteHooks = append(taxonomyBeforeDeleteHooks, taxonomyHook)
	case boil.BeforeUpsertHook:
		taxonomyBeforeUpsertHooks = append(taxonomyBeforeUpsertHooks, taxonomyHook)
	case boil.AfterInsertHook:
		taxonomyAfterInsertHooks = append(taxonomyAfterInsertHooks, taxonomyHook)
	case boil.AfterSelectHook:
		taxonomyAfterSelectHooks = append(taxonomyAfterSelectHooks, taxonomyHook)
	case boil.AfterUpdateHook:
		taxonomyAfterUpdateHooks = append(taxonomyAfterUpdateHooks, taxonomyHook)
	case boil.AfterDeleteHook:
		taxonomyAfterDeleteHooks = append(taxonomyAfterDeleteHooks, taxonomyHook)
	case boil.AfterUpsertHook:
		taxonomyAfterUpsertHooks = append(taxonomyAfterUpsertHooks, taxonomyHook)
	}
}

// OneG returns a single taxonomy record from the query using the global executor.
func (q taxonomyQuery) OneG() (*Taxonomy, error) {
	return q.One(boil.GetDB())
}

// One returns a single taxonomy record from the query.
func (q taxonomyQuery) One(exec boil.Executor) (*Taxonomy, error) {
	o := &Taxonomy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for taxonomies")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Taxonomy records from the query using the global executor.
func (q taxonomyQuery) AllG() (TaxonomySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Taxonomy records from the query.
func (q taxonomyQuery) All(exec boil.Executor) (TaxonomySlice, error) {
	var o []*Taxonomy

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Taxonomy slice")
	}

	if len(taxonomyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Taxonomy records in the query, and panics on error.
func (q taxonomyQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Taxonomy records in the query.
func (q taxonomyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count taxonomies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q taxonomyQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q taxonomyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if taxonomies exists")
	}

	return count > 0, nil
}

// Documents retrieves all the document's Documents with an executor.
func (o *Taxonomy) Documents(mods ...qm.QueryMod) documentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"documents\".\"taxonomy_id\"=?", o.ID),
	)

	query := Documents(queryMods...)
	queries.SetFrom(query.Query, "\"documents\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"documents\".*"})
	}

	return query
}

// LoadDocuments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxonomyL) LoadDocuments(e boil.Executor, singular bool, maybeTaxonomy interface{}, mods queries.Applicator) error {
	var slice []*Taxonomy
	var object *Taxonomy

	if singular {
		object = maybeTaxonomy.(*Taxonomy)
	} else {
		slice = *maybeTaxonomy.(*[]*Taxonomy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxonomyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxonomyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`documents`), qm.WhereIn(`documents.taxonomy_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load documents")
	}

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice documents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on documents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for documents")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Documents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &documentR{}
			}
			foreign.R.Taxonomy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaxonomyID) {
				local.R.Documents = append(local.R.Documents, foreign)
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.Taxonomy = local
				break
			}
		}
	}

	return nil
}

// AddDocumentsG adds the given related objects to the existing relationships
// of the taxonomy, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Taxonomy appropriately.
// Uses the global database handle.
func (o *Taxonomy) AddDocumentsG(insert bool, related ...*Document) error {
	return o.AddDocuments(boil.GetDB(), insert, related...)
}

// AddDocuments adds the given related objects to the existing relationships
// of the taxonomy, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Taxonomy appropriately.
func (o *Taxonomy) AddDocuments(exec boil.Executor, insert bool, related ...*Document) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaxonomyID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"documents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"taxonomy_id"}),
				strmangle.WhereClause("\"", "\"", 0, documentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaxonomyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taxonomyR{
			Documents: related,
		}
	} else {
		o.R.Documents = append(o.R.Documents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &documentR{
				Taxonomy: o,
			}
		} else {
			rel.R.Taxonomy = o
		}
	}
	return nil
}

// Taxonomies retrieves all the records using an executor.
func Taxonomies(mods ...qm.QueryMod) taxonomyQuery {
	mods = append(mods, qm.From("\"taxonomies\""))
	return taxonomyQuery{NewQuery(mods...)}
}

// FindTaxonomyG retrieves a single record by ID.
func FindTaxonomyG(iD null.Int64, selectCols ...string) (*Taxonomy, error) {
	return FindTaxonomy(boil.GetDB(), iD, selectCols...)
}

// FindTaxonomy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxonomy(exec boil.Executor, iD null.Int64, selectCols ...string) (*Taxonomy, error) {
	taxonomyObj := &Taxonomy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"taxonomies\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taxonomyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from taxonomies")
	}

	return taxonomyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Taxonomy) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Taxonomy) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no taxonomies provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taxonomyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxonomyInsertCacheMut.RLock()
	cache, cached := taxonomyInsertCache[key]
	taxonomyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxonomyAllColumns,
			taxonomyColumnsWithDefault,
			taxonomyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taxonomyType, taxonomyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxonomyType, taxonomyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"taxonomies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"taxonomies\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"taxonomies\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, taxonomyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into taxonomies")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for taxonomies")
	}

CacheNoHooks:
	if !cached {
		taxonomyInsertCacheMut.Lock()
		taxonomyInsertCache[key] = cache
		taxonomyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Taxonomy record using the global executor.
// See Update for more documentation.
func (o *Taxonomy) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Taxonomy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Taxonomy) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taxonomyUpdateCacheMut.RLock()
	cache, cached := taxonomyUpdateCache[key]
	taxonomyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxonomyAllColumns,
			taxonomyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update taxonomies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"taxonomies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, taxonomyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxonomyType, taxonomyMapping, append(wl, taxonomyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update taxonomies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for taxonomies")
	}

	if !cached {
		taxonomyUpdateCacheMut.Lock()
		taxonomyUpdateCache[key] = cache
		taxonomyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q taxonomyQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q taxonomyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for taxonomies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for taxonomies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TaxonomySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxonomySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxonomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"taxonomies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxonomyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in taxonomy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all taxonomy")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Taxonomy record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Taxonomy) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Taxonomy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Taxonomy) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Taxonomy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxonomyPrimaryKeyMapping)
	sql := "DELETE FROM \"taxonomies\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from taxonomies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for taxonomies")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taxonomyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no taxonomyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from taxonomies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for taxonomies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TaxonomySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxonomySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taxonomyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxonomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"taxonomies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxonomyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from taxonomy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for taxonomies")
	}

	if len(taxonomyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Taxonomy) ReloadG() error {
	if o == nil {
		return errors.New("db: no Taxonomy provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Taxonomy) Reload(exec boil.Executor) error {
	ret, err := FindTaxonomy(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxonomySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty TaxonomySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxonomySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxonomySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxonomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"taxonomies\".* FROM \"taxonomies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxonomyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TaxonomySlice")
	}

	*o = slice

	return nil
}

// TaxonomyExistsG checks if the Taxonomy row exists.
func TaxonomyExistsG(iD null.Int64) (bool, error) {
	return TaxonomyExists(boil.GetDB(), iD)
}

// TaxonomyExists checks if the Taxonomy row exists.
func TaxonomyExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"taxonomies\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if taxonomies exists")
	}

	return exists, nil
}
