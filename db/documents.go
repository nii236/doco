// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Document is an object representing the database table.
type Document struct {
	ID         null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	ProjectID  int64      `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	TaxonomyID int64      `boil:"taxonomy_id" json:"taxonomy_id" toml:"taxonomy_id" yaml:"taxonomy_id"`
	Sequence   int64      `boil:"sequence" json:"sequence" toml:"sequence" yaml:"sequence"`
	Archived   bool       `boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt null.Time  `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *documentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L documentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DocumentColumns = struct {
	ID         string
	ProjectID  string
	TaxonomyID string
	Sequence   string
	Archived   string
	ArchivedAt string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	ProjectID:  "project_id",
	TaxonomyID: "taxonomy_id",
	Sequence:   "sequence",
	Archived:   "archived",
	ArchivedAt: "archived_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

var DocumentWhere = struct {
	ID         whereHelpernull_Int64
	ProjectID  whereHelperint64
	TaxonomyID whereHelperint64
	Sequence   whereHelperint64
	Archived   whereHelperbool
	ArchivedAt whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelpernull_Int64{field: "\"documents\".\"id\""},
	ProjectID:  whereHelperint64{field: "\"documents\".\"project_id\""},
	TaxonomyID: whereHelperint64{field: "\"documents\".\"taxonomy_id\""},
	Sequence:   whereHelperint64{field: "\"documents\".\"sequence\""},
	Archived:   whereHelperbool{field: "\"documents\".\"archived\""},
	ArchivedAt: whereHelpernull_Time{field: "\"documents\".\"archived_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"documents\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"documents\".\"created_at\""},
}

// DocumentRels is where relationship names are stored.
var DocumentRels = struct {
	Taxonomy      string
	Project       string
	DocumentsBlob string
	Tags          string
}{
	Taxonomy:      "Taxonomy",
	Project:       "Project",
	DocumentsBlob: "DocumentsBlob",
	Tags:          "Tags",
}

// documentR is where relationships are stored.
type documentR struct {
	Taxonomy      *Taxonomy
	Project       *Project
	DocumentsBlob *DocumentsBlob
	Tags          TagSlice
}

// NewStruct creates a new relationship struct
func (*documentR) NewStruct() *documentR {
	return &documentR{}
}

// documentL is where Load methods for each relationship are stored.
type documentL struct{}

var (
	documentAllColumns            = []string{"id", "project_id", "taxonomy_id", "sequence", "archived", "archived_at", "updated_at", "created_at"}
	documentColumnsWithoutDefault = []string{"project_id", "taxonomy_id", "sequence", "archived_at"}
	documentColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	documentPrimaryKeyColumns     = []string{"id"}
)

type (
	// DocumentSlice is an alias for a slice of pointers to Document.
	// This should generally be used opposed to []Document.
	DocumentSlice []*Document
	// DocumentHook is the signature for custom Document hook methods
	DocumentHook func(boil.Executor, *Document) error

	documentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	documentType                 = reflect.TypeOf(&Document{})
	documentMapping              = queries.MakeStructMapping(documentType)
	documentPrimaryKeyMapping, _ = queries.BindMapping(documentType, documentMapping, documentPrimaryKeyColumns)
	documentInsertCacheMut       sync.RWMutex
	documentInsertCache          = make(map[string]insertCache)
	documentUpdateCacheMut       sync.RWMutex
	documentUpdateCache          = make(map[string]updateCache)
	documentUpsertCacheMut       sync.RWMutex
	documentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var documentBeforeInsertHooks []DocumentHook
var documentBeforeUpdateHooks []DocumentHook
var documentBeforeDeleteHooks []DocumentHook
var documentBeforeUpsertHooks []DocumentHook

var documentAfterInsertHooks []DocumentHook
var documentAfterSelectHooks []DocumentHook
var documentAfterUpdateHooks []DocumentHook
var documentAfterDeleteHooks []DocumentHook
var documentAfterUpsertHooks []DocumentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Document) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Document) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Document) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Document) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Document) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Document) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Document) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Document) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Document) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocumentHook registers your hook function for all future operations.
func AddDocumentHook(hookPoint boil.HookPoint, documentHook DocumentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		documentBeforeInsertHooks = append(documentBeforeInsertHooks, documentHook)
	case boil.BeforeUpdateHook:
		documentBeforeUpdateHooks = append(documentBeforeUpdateHooks, documentHook)
	case boil.BeforeDeleteHook:
		documentBeforeDeleteHooks = append(documentBeforeDeleteHooks, documentHook)
	case boil.BeforeUpsertHook:
		documentBeforeUpsertHooks = append(documentBeforeUpsertHooks, documentHook)
	case boil.AfterInsertHook:
		documentAfterInsertHooks = append(documentAfterInsertHooks, documentHook)
	case boil.AfterSelectHook:
		documentAfterSelectHooks = append(documentAfterSelectHooks, documentHook)
	case boil.AfterUpdateHook:
		documentAfterUpdateHooks = append(documentAfterUpdateHooks, documentHook)
	case boil.AfterDeleteHook:
		documentAfterDeleteHooks = append(documentAfterDeleteHooks, documentHook)
	case boil.AfterUpsertHook:
		documentAfterUpsertHooks = append(documentAfterUpsertHooks, documentHook)
	}
}

// OneG returns a single document record from the query using the global executor.
func (q documentQuery) OneG() (*Document, error) {
	return q.One(boil.GetDB())
}

// One returns a single document record from the query.
func (q documentQuery) One(exec boil.Executor) (*Document, error) {
	o := &Document{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for documents")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Document records from the query using the global executor.
func (q documentQuery) AllG() (DocumentSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Document records from the query.
func (q documentQuery) All(exec boil.Executor) (DocumentSlice, error) {
	var o []*Document

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Document slice")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Document records in the query, and panics on error.
func (q documentQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Document records in the query.
func (q documentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count documents rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q documentQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q documentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if documents exists")
	}

	return count > 0, nil
}

// Taxonomy pointed to by the foreign key.
func (o *Document) Taxonomy(mods ...qm.QueryMod) taxonomyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaxonomyID),
	}

	queryMods = append(queryMods, mods...)

	query := Taxonomies(queryMods...)
	queries.SetFrom(query.Query, "\"taxonomies\"")

	return query
}

// Project pointed to by the foreign key.
func (o *Document) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"projects\"")

	return query
}

// DocumentsBlob pointed to by the foreign key.
func (o *Document) DocumentsBlob(mods ...qm.QueryMod) documentsBlobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"document_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := DocumentsBlobs(queryMods...)
	queries.SetFrom(query.Query, "\"documents_blobs\"")

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Document) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"documents_tags\" on \"tags\".\"id\" = \"documents_tags\".\"tag_id\""),
		qm.Where("\"documents_tags\".\"document_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tags\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tags\".*"})
	}

	return query
}

// LoadTaxonomy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentL) LoadTaxonomy(e boil.Executor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		if !queries.IsNil(object.TaxonomyID) {
			args = append(args, object.TaxonomyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaxonomyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaxonomyID) {
				args = append(args, obj.TaxonomyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`taxonomies`), qm.WhereIn(`taxonomies.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Taxonomy")
	}

	var resultSlice []*Taxonomy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Taxonomy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for taxonomies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for taxonomies")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Taxonomy = foreign
		if foreign.R == nil {
			foreign.R = &taxonomyR{}
		}
		foreign.R.Documents = append(foreign.R.Documents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaxonomyID, foreign.ID) {
				local.R.Taxonomy = foreign
				if foreign.R == nil {
					foreign.R = &taxonomyR{}
				}
				foreign.R.Documents = append(foreign.R.Documents, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentL) LoadProject(e boil.Executor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		if !queries.IsNil(object.ProjectID) {
			args = append(args, object.ProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProjectID) {
				args = append(args, obj.ProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`projects`), qm.WhereIn(`projects.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Documents = append(foreign.R.Documents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProjectID, foreign.ID) {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Documents = append(foreign.R.Documents, local)
				break
			}
		}
	}

	return nil
}

// LoadDocumentsBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (documentL) LoadDocumentsBlob(e boil.Executor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`documents_blobs`), qm.WhereIn(`documents_blobs.document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DocumentsBlob")
	}

	var resultSlice []*DocumentsBlob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DocumentsBlob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for documents_blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for documents_blobs")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocumentsBlob = foreign
		if foreign.R == nil {
			foreign.R = &documentsBlobR{}
		}
		foreign.R.Document = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.DocumentID) {
				local.R.DocumentsBlob = foreign
				if foreign.R == nil {
					foreign.R = &documentsBlobR{}
				}
				foreign.R.Document = local
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (documentL) LoadTags(e boil.Executor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tags\".*, \"a\".\"document_id\""),
		qm.From("\"tags\""),
		qm.InnerJoin("\"documents_tags\" as \"a\" on \"tags\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"document_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag

	var localJoinCols []int64
	for results.Next() {
		one := new(Tag)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Name, &one.Archived, &one.ArchivedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tags")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Documents = append(foreign.R.Documents, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Documents = append(foreign.R.Documents, local)
				break
			}
		}
	}

	return nil
}

// SetTaxonomyG of the document to the related item.
// Sets o.R.Taxonomy to related.
// Adds o to related.R.Documents.
// Uses the global database handle.
func (o *Document) SetTaxonomyG(insert bool, related *Taxonomy) error {
	return o.SetTaxonomy(boil.GetDB(), insert, related)
}

// SetTaxonomy of the document to the related item.
// Sets o.R.Taxonomy to related.
// Adds o to related.R.Documents.
func (o *Document) SetTaxonomy(exec boil.Executor, insert bool, related *Taxonomy) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"documents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"taxonomy_id"}),
		strmangle.WhereClause("\"", "\"", 0, documentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaxonomyID, related.ID)
	if o.R == nil {
		o.R = &documentR{
			Taxonomy: related,
		}
	} else {
		o.R.Taxonomy = related
	}

	if related.R == nil {
		related.R = &taxonomyR{
			Documents: DocumentSlice{o},
		}
	} else {
		related.R.Documents = append(related.R.Documents, o)
	}

	return nil
}

// SetProjectG of the document to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Documents.
// Uses the global database handle.
func (o *Document) SetProjectG(insert bool, related *Project) error {
	return o.SetProject(boil.GetDB(), insert, related)
}

// SetProject of the document to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Documents.
func (o *Document) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"documents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 0, documentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProjectID, related.ID)
	if o.R == nil {
		o.R = &documentR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Documents: DocumentSlice{o},
		}
	} else {
		related.R.Documents = append(related.R.Documents, o)
	}

	return nil
}

// SetDocumentsBlobG of the document to the related item.
// Sets o.R.DocumentsBlob to related.
// Adds o to related.R.Document.
// Uses the global database handle.
func (o *Document) SetDocumentsBlobG(insert bool, related *DocumentsBlob) error {
	return o.SetDocumentsBlob(boil.GetDB(), insert, related)
}

// SetDocumentsBlob of the document to the related item.
// Sets o.R.DocumentsBlob to related.
// Adds o to related.R.Document.
func (o *Document) SetDocumentsBlob(exec boil.Executor, insert bool, related *DocumentsBlob) error {
	var err error

	if insert {
		queries.Assign(&related.DocumentID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"documents_blobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"document_id"}),
			strmangle.WhereClause("\"", "\"", 0, documentsBlobPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.DocumentID, related.BlobID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.DocumentID, o.ID)
	}

	if o.R == nil {
		o.R = &documentR{
			DocumentsBlob: related,
		}
	} else {
		o.R.DocumentsBlob = related
	}

	if related.R == nil {
		related.R = &documentsBlobR{
			Document: o,
		}
	} else {
		related.R.Document = o
	}
	return nil
}

// AddTagsG adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Documents appropriately.
// Uses the global database handle.
func (o *Document) AddTagsG(insert bool, related ...*Tag) error {
	return o.AddTags(boil.GetDB(), insert, related...)
}

// AddTags adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Documents appropriately.
func (o *Document) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"documents_tags\" (\"document_id\", \"tag_id\") values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &documentR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Documents: DocumentSlice{o},
			}
		} else {
			rel.R.Documents = append(rel.R.Documents, o)
		}
	}
	return nil
}

// SetTagsG removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Documents's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Documents's Tags accordingly.
// Uses the global database handle.
func (o *Document) SetTagsG(insert bool, related ...*Tag) error {
	return o.SetTags(boil.GetDB(), insert, related...)
}

// SetTags removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Documents's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Documents's Tags accordingly.
func (o *Document) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from \"documents_tags\" where \"document_id\" = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromDocumentsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(exec, insert, related...)
}

// RemoveTagsG relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Documents.
// Uses the global database handle.
func (o *Document) RemoveTagsG(related ...*Tag) error {
	return o.RemoveTags(boil.GetDB(), related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Documents.
func (o *Document) RemoveTags(exec boil.Executor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"documents_tags\" where \"document_id\" = ? and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromDocumentsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromDocumentsSlice(o *Document, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Documents {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.Documents)
			if ln > 1 && i < ln-1 {
				rel.R.Documents[i] = rel.R.Documents[ln-1]
			}
			rel.R.Documents = rel.R.Documents[:ln-1]
			break
		}
	}
}

// Documents retrieves all the records using an executor.
func Documents(mods ...qm.QueryMod) documentQuery {
	mods = append(mods, qm.From("\"documents\""))
	return documentQuery{NewQuery(mods...)}
}

// FindDocumentG retrieves a single record by ID.
func FindDocumentG(iD null.Int64, selectCols ...string) (*Document, error) {
	return FindDocument(boil.GetDB(), iD, selectCols...)
}

// FindDocument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDocument(exec boil.Executor, iD null.Int64, selectCols ...string) (*Document, error) {
	documentObj := &Document{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"documents\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, documentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from documents")
	}

	return documentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Document) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Document) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no documents provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	documentInsertCacheMut.RLock()
	cache, cached := documentInsertCache[key]
	documentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			documentAllColumns,
			documentColumnsWithDefault,
			documentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(documentType, documentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"documents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"documents\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"documents\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, documentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into documents")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for documents")
	}

CacheNoHooks:
	if !cached {
		documentInsertCacheMut.Lock()
		documentInsertCache[key] = cache
		documentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Document record using the global executor.
// See Update for more documentation.
func (o *Document) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Document.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Document) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	documentUpdateCacheMut.RLock()
	cache, cached := documentUpdateCache[key]
	documentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			documentAllColumns,
			documentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update documents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"documents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, documentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, append(wl, documentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update documents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for documents")
	}

	if !cached {
		documentUpdateCacheMut.Lock()
		documentUpdateCache[key] = cache
		documentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q documentQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q documentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for documents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for documents")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DocumentSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocumentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"documents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in document slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all document")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Document record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Document) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Document record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Document) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Document provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), documentPrimaryKeyMapping)
	sql := "DELETE FROM \"documents\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from documents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for documents")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q documentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no documentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from documents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for documents")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DocumentSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocumentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(documentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"documents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from document slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for documents")
	}

	if len(documentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Document) ReloadG() error {
	if o == nil {
		return errors.New("db: no Document provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Document) Reload(exec boil.Executor) error {
	ret, err := FindDocument(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty DocumentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DocumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"documents\".* FROM \"documents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in DocumentSlice")
	}

	*o = slice

	return nil
}

// DocumentExistsG checks if the Document row exists.
func DocumentExistsG(iD null.Int64) (bool, error) {
	return DocumentExists(boil.GetDB(), iD)
}

// DocumentExists checks if the Document row exists.
func DocumentExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"documents\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if documents exists")
	}

	return exists, nil
}
