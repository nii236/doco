// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DocumentsBlob is an object representing the database table.
type DocumentsBlob struct {
	DocumentID int64  `boil:"document_id" json:"document_id" toml:"document_id" yaml:"document_id"`
	BlobID     int64  `boil:"blob_id" json:"blob_id" toml:"blob_id" yaml:"blob_id"`
	Version    string `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *documentsBlobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L documentsBlobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DocumentsBlobColumns = struct {
	DocumentID string
	BlobID     string
	Version    string
}{
	DocumentID: "document_id",
	BlobID:     "blob_id",
	Version:    "version",
}

// Generated where

var DocumentsBlobWhere = struct {
	DocumentID whereHelperint64
	BlobID     whereHelperint64
	Version    whereHelperstring
}{
	DocumentID: whereHelperint64{field: "\"documents_blobs\".\"document_id\""},
	BlobID:     whereHelperint64{field: "\"documents_blobs\".\"blob_id\""},
	Version:    whereHelperstring{field: "\"documents_blobs\".\"version\""},
}

// DocumentsBlobRels is where relationship names are stored.
var DocumentsBlobRels = struct {
	Blob     string
	Document string
}{
	Blob:     "Blob",
	Document: "Document",
}

// documentsBlobR is where relationships are stored.
type documentsBlobR struct {
	Blob     *Blob
	Document *Document
}

// NewStruct creates a new relationship struct
func (*documentsBlobR) NewStruct() *documentsBlobR {
	return &documentsBlobR{}
}

// documentsBlobL is where Load methods for each relationship are stored.
type documentsBlobL struct{}

var (
	documentsBlobAllColumns            = []string{"document_id", "blob_id", "version"}
	documentsBlobColumnsWithoutDefault = []string{"blob_id", "version"}
	documentsBlobColumnsWithDefault    = []string{"document_id"}
	documentsBlobPrimaryKeyColumns     = []string{"document_id", "blob_id"}
)

type (
	// DocumentsBlobSlice is an alias for a slice of pointers to DocumentsBlob.
	// This should generally be used opposed to []DocumentsBlob.
	DocumentsBlobSlice []*DocumentsBlob
	// DocumentsBlobHook is the signature for custom DocumentsBlob hook methods
	DocumentsBlobHook func(boil.Executor, *DocumentsBlob) error

	documentsBlobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	documentsBlobType                 = reflect.TypeOf(&DocumentsBlob{})
	documentsBlobMapping              = queries.MakeStructMapping(documentsBlobType)
	documentsBlobPrimaryKeyMapping, _ = queries.BindMapping(documentsBlobType, documentsBlobMapping, documentsBlobPrimaryKeyColumns)
	documentsBlobInsertCacheMut       sync.RWMutex
	documentsBlobInsertCache          = make(map[string]insertCache)
	documentsBlobUpdateCacheMut       sync.RWMutex
	documentsBlobUpdateCache          = make(map[string]updateCache)
	documentsBlobUpsertCacheMut       sync.RWMutex
	documentsBlobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var documentsBlobBeforeInsertHooks []DocumentsBlobHook
var documentsBlobBeforeUpdateHooks []DocumentsBlobHook
var documentsBlobBeforeDeleteHooks []DocumentsBlobHook
var documentsBlobBeforeUpsertHooks []DocumentsBlobHook

var documentsBlobAfterInsertHooks []DocumentsBlobHook
var documentsBlobAfterSelectHooks []DocumentsBlobHook
var documentsBlobAfterUpdateHooks []DocumentsBlobHook
var documentsBlobAfterDeleteHooks []DocumentsBlobHook
var documentsBlobAfterUpsertHooks []DocumentsBlobHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DocumentsBlob) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DocumentsBlob) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DocumentsBlob) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DocumentsBlob) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DocumentsBlob) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DocumentsBlob) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DocumentsBlob) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DocumentsBlob) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DocumentsBlob) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentsBlobAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocumentsBlobHook registers your hook function for all future operations.
func AddDocumentsBlobHook(hookPoint boil.HookPoint, documentsBlobHook DocumentsBlobHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		documentsBlobBeforeInsertHooks = append(documentsBlobBeforeInsertHooks, documentsBlobHook)
	case boil.BeforeUpdateHook:
		documentsBlobBeforeUpdateHooks = append(documentsBlobBeforeUpdateHooks, documentsBlobHook)
	case boil.BeforeDeleteHook:
		documentsBlobBeforeDeleteHooks = append(documentsBlobBeforeDeleteHooks, documentsBlobHook)
	case boil.BeforeUpsertHook:
		documentsBlobBeforeUpsertHooks = append(documentsBlobBeforeUpsertHooks, documentsBlobHook)
	case boil.AfterInsertHook:
		documentsBlobAfterInsertHooks = append(documentsBlobAfterInsertHooks, documentsBlobHook)
	case boil.AfterSelectHook:
		documentsBlobAfterSelectHooks = append(documentsBlobAfterSelectHooks, documentsBlobHook)
	case boil.AfterUpdateHook:
		documentsBlobAfterUpdateHooks = append(documentsBlobAfterUpdateHooks, documentsBlobHook)
	case boil.AfterDeleteHook:
		documentsBlobAfterDeleteHooks = append(documentsBlobAfterDeleteHooks, documentsBlobHook)
	case boil.AfterUpsertHook:
		documentsBlobAfterUpsertHooks = append(documentsBlobAfterUpsertHooks, documentsBlobHook)
	}
}

// OneG returns a single documentsBlob record from the query using the global executor.
func (q documentsBlobQuery) OneG() (*DocumentsBlob, error) {
	return q.One(boil.GetDB())
}

// One returns a single documentsBlob record from the query.
func (q documentsBlobQuery) One(exec boil.Executor) (*DocumentsBlob, error) {
	o := &DocumentsBlob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for documents_blobs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DocumentsBlob records from the query using the global executor.
func (q documentsBlobQuery) AllG() (DocumentsBlobSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all DocumentsBlob records from the query.
func (q documentsBlobQuery) All(exec boil.Executor) (DocumentsBlobSlice, error) {
	var o []*DocumentsBlob

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to DocumentsBlob slice")
	}

	if len(documentsBlobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DocumentsBlob records in the query, and panics on error.
func (q documentsBlobQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all DocumentsBlob records in the query.
func (q documentsBlobQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count documents_blobs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q documentsBlobQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q documentsBlobQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if documents_blobs exists")
	}

	return count > 0, nil
}

// Blob pointed to by the foreign key.
func (o *DocumentsBlob) Blob(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlobID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// Document pointed to by the foreign key.
func (o *DocumentsBlob) Document(mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DocumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Documents(queryMods...)
	queries.SetFrom(query.Query, "\"documents\"")

	return query
}

// LoadBlob allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentsBlobL) LoadBlob(e boil.Executor, singular bool, maybeDocumentsBlob interface{}, mods queries.Applicator) error {
	var slice []*DocumentsBlob
	var object *DocumentsBlob

	if singular {
		object = maybeDocumentsBlob.(*DocumentsBlob)
	} else {
		slice = *maybeDocumentsBlob.(*[]*DocumentsBlob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentsBlobR{}
		}
		if !queries.IsNil(object.BlobID) {
			args = append(args, object.BlobID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentsBlobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BlobID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BlobID) {
				args = append(args, obj.BlobID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`blobs`), qm.WhereIn(`blobs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(documentsBlobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blob = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.DocumentsBlob = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BlobID, foreign.ID) {
				local.R.Blob = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.DocumentsBlob = local
				break
			}
		}
	}

	return nil
}

// LoadDocument allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentsBlobL) LoadDocument(e boil.Executor, singular bool, maybeDocumentsBlob interface{}, mods queries.Applicator) error {
	var slice []*DocumentsBlob
	var object *DocumentsBlob

	if singular {
		object = maybeDocumentsBlob.(*DocumentsBlob)
	} else {
		slice = *maybeDocumentsBlob.(*[]*DocumentsBlob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentsBlobR{}
		}
		if !queries.IsNil(object.DocumentID) {
			args = append(args, object.DocumentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentsBlobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocumentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DocumentID) {
				args = append(args, obj.DocumentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`documents`), qm.WhereIn(`documents.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Document")
	}

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Document")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for documents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for documents")
	}

	if len(documentsBlobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Document = foreign
		if foreign.R == nil {
			foreign.R = &documentR{}
		}
		foreign.R.DocumentsBlob = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DocumentID, foreign.ID) {
				local.R.Document = foreign
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.DocumentsBlob = local
				break
			}
		}
	}

	return nil
}

// SetBlobG of the documentsBlob to the related item.
// Sets o.R.Blob to related.
// Adds o to related.R.DocumentsBlob.
// Uses the global database handle.
func (o *DocumentsBlob) SetBlobG(insert bool, related *Blob) error {
	return o.SetBlob(boil.GetDB(), insert, related)
}

// SetBlob of the documentsBlob to the related item.
// Sets o.R.Blob to related.
// Adds o to related.R.DocumentsBlob.
func (o *DocumentsBlob) SetBlob(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"documents_blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"blob_id"}),
		strmangle.WhereClause("\"", "\"", 0, documentsBlobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DocumentID, o.BlobID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BlobID, related.ID)
	if o.R == nil {
		o.R = &documentsBlobR{
			Blob: related,
		}
	} else {
		o.R.Blob = related
	}

	if related.R == nil {
		related.R = &blobR{
			DocumentsBlob: o,
		}
	} else {
		related.R.DocumentsBlob = o
	}

	return nil
}

// SetDocumentG of the documentsBlob to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.DocumentsBlob.
// Uses the global database handle.
func (o *DocumentsBlob) SetDocumentG(insert bool, related *Document) error {
	return o.SetDocument(boil.GetDB(), insert, related)
}

// SetDocument of the documentsBlob to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.DocumentsBlob.
func (o *DocumentsBlob) SetDocument(exec boil.Executor, insert bool, related *Document) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"documents_blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"document_id"}),
		strmangle.WhereClause("\"", "\"", 0, documentsBlobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DocumentID, o.BlobID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DocumentID, related.ID)
	if o.R == nil {
		o.R = &documentsBlobR{
			Document: related,
		}
	} else {
		o.R.Document = related
	}

	if related.R == nil {
		related.R = &documentR{
			DocumentsBlob: o,
		}
	} else {
		related.R.DocumentsBlob = o
	}

	return nil
}

// DocumentsBlobs retrieves all the records using an executor.
func DocumentsBlobs(mods ...qm.QueryMod) documentsBlobQuery {
	mods = append(mods, qm.From("\"documents_blobs\""))
	return documentsBlobQuery{NewQuery(mods...)}
}

// FindDocumentsBlobG retrieves a single record by ID.
func FindDocumentsBlobG(documentID int64, blobID int64, selectCols ...string) (*DocumentsBlob, error) {
	return FindDocumentsBlob(boil.GetDB(), documentID, blobID, selectCols...)
}

// FindDocumentsBlob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDocumentsBlob(exec boil.Executor, documentID int64, blobID int64, selectCols ...string) (*DocumentsBlob, error) {
	documentsBlobObj := &DocumentsBlob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"documents_blobs\" where \"document_id\"=? AND \"blob_id\"=?", sel,
	)

	q := queries.Raw(query, documentID, blobID)

	err := q.Bind(nil, exec, documentsBlobObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from documents_blobs")
	}

	return documentsBlobObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DocumentsBlob) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DocumentsBlob) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no documents_blobs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentsBlobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	documentsBlobInsertCacheMut.RLock()
	cache, cached := documentsBlobInsertCache[key]
	documentsBlobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			documentsBlobAllColumns,
			documentsBlobColumnsWithDefault,
			documentsBlobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(documentsBlobType, documentsBlobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(documentsBlobType, documentsBlobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"documents_blobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"documents_blobs\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"documents_blobs\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, documentsBlobPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into documents_blobs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DocumentID,
		o.BlobID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for documents_blobs")
	}

CacheNoHooks:
	if !cached {
		documentsBlobInsertCacheMut.Lock()
		documentsBlobInsertCache[key] = cache
		documentsBlobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single DocumentsBlob record using the global executor.
// See Update for more documentation.
func (o *DocumentsBlob) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the DocumentsBlob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DocumentsBlob) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	documentsBlobUpdateCacheMut.RLock()
	cache, cached := documentsBlobUpdateCache[key]
	documentsBlobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			documentsBlobAllColumns,
			documentsBlobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update documents_blobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"documents_blobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, documentsBlobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(documentsBlobType, documentsBlobMapping, append(wl, documentsBlobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update documents_blobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for documents_blobs")
	}

	if !cached {
		documentsBlobUpdateCacheMut.Lock()
		documentsBlobUpdateCache[key] = cache
		documentsBlobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q documentsBlobQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q documentsBlobQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for documents_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for documents_blobs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DocumentsBlobSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocumentsBlobSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentsBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"documents_blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentsBlobPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in documentsBlob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all documentsBlob")
	}
	return rowsAff, nil
}

// DeleteG deletes a single DocumentsBlob record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DocumentsBlob) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single DocumentsBlob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DocumentsBlob) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no DocumentsBlob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), documentsBlobPrimaryKeyMapping)
	sql := "DELETE FROM \"documents_blobs\" WHERE \"document_id\"=? AND \"blob_id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from documents_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for documents_blobs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q documentsBlobQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no documentsBlobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from documents_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for documents_blobs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DocumentsBlobSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocumentsBlobSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(documentsBlobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentsBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"documents_blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentsBlobPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from documentsBlob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for documents_blobs")
	}

	if len(documentsBlobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DocumentsBlob) ReloadG() error {
	if o == nil {
		return errors.New("db: no DocumentsBlob provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DocumentsBlob) Reload(exec boil.Executor) error {
	ret, err := FindDocumentsBlob(exec, o.DocumentID, o.BlobID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentsBlobSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty DocumentsBlobSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentsBlobSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DocumentsBlobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentsBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"documents_blobs\".* FROM \"documents_blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentsBlobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in DocumentsBlobSlice")
	}

	*o = slice

	return nil
}

// DocumentsBlobExistsG checks if the DocumentsBlob row exists.
func DocumentsBlobExistsG(documentID int64, blobID int64) (bool, error) {
	return DocumentsBlobExists(boil.GetDB(), documentID, blobID)
}

// DocumentsBlobExists checks if the DocumentsBlob row exists.
func DocumentsBlobExists(exec boil.Executor, documentID int64, blobID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"documents_blobs\" where \"document_id\"=? AND \"blob_id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, documentID, blobID)
	}

	row := exec.QueryRow(sql, documentID, blobID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if documents_blobs exists")
	}

	return exists, nil
}
